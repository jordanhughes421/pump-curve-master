datasource db {
  // For development (SQLite)
  // provider = "sqlite"
  // url      = "file:./dev.db"
  
  // For production (PostgreSQL on Heroku)
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int      @id @default(autoincrement())
  name           String?
  email          String   @unique
  password       String
  firstName      String?
  lastName       String?
  companyName    String?
  profilePicture String?
  googleId       String?
  emailVerified  DateTime?
  image          String?
  role           String    @default("ENGINEER")
  accounts       Account[]
  sessions       Session[]
  createdPumps   PumpModel[]
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier   String
  token        String   @unique
  expires      DateTime
  @@unique([identifier, token])
}

model PumpModel {
  id          Int         @id @default(autoincrement())
  name        String
  type        String
  description String?
  manufacturer String
  modelNumber  String
  maxFlow     Float       // in GPM
  maxHead     Float       // in feet
  maxSpeed    Int         // in RPM
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  curves      PumpCurve[]
  documents   Document[]
  bom         BOM[]
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      Int
}

model PumpCurve {
  id          Int       @id @default(autoincrement())
  pumpModel   PumpModel @relation(fields: [pumpModelId], references: [id])
  pumpModelId Int
  speed       Int       // in RPM
  points      String    // Changed from Json to String - will store JSON as string
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          Int       @id @default(autoincrement())
  title       String
  fileUrl     String
  fileType    String
  pumpModel   PumpModel @relation(fields: [pumpModelId], references: [id])
  pumpModelId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BOM {
  id          Int       @id @default(autoincrement())
  pumpModel   PumpModel @relation(fields: [pumpModelId], references: [id])
  pumpModelId Int
  partNumber  String
  description String
  quantity    Int
  unit        String
  supplier    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
